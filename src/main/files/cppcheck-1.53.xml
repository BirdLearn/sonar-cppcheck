<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
  <cppcheck version="1.53"/>
  <errors>  <error id="AssignmentAddressToInteger" severity="portability" msg="Assigning an address value to the integer (int/long/etc) type is not portable" verbose="Assigning an address value to the integer (int/long/etc) type is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit address to 32-bit integer. The safe way is to always assign addresses only to pointer types (or typedefs).">
  </error>
  <error id="AssignmentIntegerToAddress" severity="portability" msg="Assigning an integer (int/long/etc) to a pointer is not portable" verbose="Assigning an integer (int/long/etc) to a pointer is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 32-bit integer to 64-bit pointer. The safe way is to always assign address to pointer.">
  </error>
  <error id="autoVariables" severity="error" msg="Assigning address of local auto-variable to a function parameter." verbose="Dangerous assignment - function parameter takes the address of a local auto-variable. Local auto-variables are reserved from the stack. And the stack is freed when the function ends. So the pointer to a local variable is invalid after the function ends.">
  </error>
  <error id="returnAddressOfAutoVariable" severity="error" msg="Return of the address of an auto-variable" verbose="Return of the address of an auto-variable">
  </error>
  <error id="returnLocalVariable" severity="error" msg="Returning pointer to local array variable" verbose="Returning pointer to local array variable">
  </error>
  <error id="returnReference" severity="error" msg="Returning reference to auto variable" verbose="Returning reference to auto variable">
  </error>
  <error id="returnTempReference" severity="error" msg="Returning reference to temporary" verbose="Returning reference to temporary">
  </error>
  <error id="returnAutocstr" severity="error" msg="Returning pointer to auto variable" verbose="Returning pointer to auto variable">
  </error>
  <error id="returnTempPointer" severity="error" msg="Returning pointer to temporary" verbose="Returning pointer to temporary">
  </error>
  <error id="autovarInvalidDeallocation" severity="error" msg="Deallocating auto-variable is invalid" verbose="Deallocating an auto-variable is invalid. You should only free memory that has been allocated dynamically.">
  </error>
  <error id="returnAddressOfFunctionParameter" severity="error" msg="Return the address of function parameter 'parameter'" verbose="Address of the function parameter 'parameter' is invalid after the function exits. Function parameters are created into the stack. When the function exits the stack is deleted.">
  </error>
  <error id="boostForeachError" severity="error" msg="BOOST_FOREACH caches the end() iterator. It's undefined behavior if you modify the container." verbose="BOOST_FOREACH caches the end() iterator. It's undefined behavior if you modify the container.">
  </error>
  <error id="arrayIndexOutOfBounds" severity="error" msg="Array 'array[2]' index 2 out of bounds" verbose="Array 'array[2]' index 2 out of bounds">
  </error>
  <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer access out-of-bounds: buffer" verbose="Buffer access out-of-bounds: buffer">
  </error>
  <error id="outOfBounds" severity="error" msg="index is out of bounds: Supplied size 2 is larger than actual size of 1" verbose="index is out of bounds: Supplied size 2 is larger than actual size of 1">
  </error>
  <error id="terminateStrncpy" severity="warning" msg="The buffer 'buffer' may not be zero-terminated after the call to strncpy()." verbose="The use of strncpy() usually indicates that the programmer wants to ensure the buffer is zero-terminated after the call. However if the (buffer) size given for the strncpy() call matches the actual buffer size strncpy() does not add the zero at the end of the buffer. This may cause bugs later in the code if the code assumes buffer is zero-terminated.">
  </error>

  <error id="negativeIndex" severity="error" msg="Array index -1 is out of bounds" verbose="Array index -1 is out of bounds">
  </error>
  <error id="insecureCmdLineArgs" severity="error" msg="Buffer overrun possible for long cmd-line args" verbose="Buffer overrun possible for long cmd-line args">
  </error>
  <error id="pointerOutOfBounds" severity="portability" msg="Undefined behaviour: pointer arithmetic result does not point into or just past the end of the array" verbose="Undefined behaviour: Using pointer arithmetic so that the result does not point into or just past the end of the same object. Further information: https://www.securecoding.cert.org/confluence/display/seccode/ARR30-C.+Do+not+form+or+use+out+of+bounds+pointers+or+array+subscripts">
  </error>
  <error id="arrayIndexThenCheck" severity="style" msg="Array index index is used before limits check" verbose="Defensive programming: The variable index is used as array index and then there is a check that it is within limits. This can mean that the array might be accessed out-of-bounds. Reorder conditions such as '(a[i] &amp;&amp; i &lt; 10)' to '(i &lt; 10 &amp;&amp; a[i])'. That way the array will not be accessed when the index is out of limits.">
  </error>
  <error id="possibleBufferAccessOutOfBounds" severity="warning" msg="Possible buffer overflow if strlen(source) is larger than or equal to sizeof(destination)." verbose="The source buffer is larger than the destination buffer so there is the potential for overflowing the destination buffer.">
  </error>

  <error id="noConstructor" severity="style" msg="The class 'classname' does not have a constructor." verbose="The class 'classname 'does not have a constructor but it has attributes. The attributes are not initialized which may cause bugs or undefined behavior.">
  </error>
  <error id="uninitVar" severity="warning" msg="Member variable 'classname::varname' is not initialized in the constructor." verbose="Member variable 'classname::varname' is not initialized in the constructor.">
  </error>
  <error id="operatorEqVarError" severity="warning" msg="Member variable 'classname::' is not assigned a value in 'classname::operator='" verbose="Member variable 'classname::' is not assigned a value in 'classname::operator='">
  </error>
  <error id="unusedPrivateFunction" severity="style" msg="Unused private function 'classname::funcname'" verbose="Unused private function 'classname::funcname'">
  </error>
  <error id="memsetClass" severity="error" msg="Using 'memfunc' on class that contains a classname" verbose="Using 'memfunc' on class that contains a classname">
  </error>
  <error id="operatorEq" severity="style" msg="'class::operator=' should return 'class &amp;'" verbose="'class::operator=' should return 'class &amp;'">
  </error>
  <error id="thisSubtraction" severity="warning" msg="Suspicious pointer subtraction" verbose="Suspicious pointer subtraction">
  </error>
  <error id="operatorEqRetRefThis" severity="style" msg="'operator=' should return reference to self" verbose="'operator=' should return reference to self">
  </error>
  <error id="operatorEqToSelf" severity="warning" msg="'operator=' should check for assignment to self" verbose="'operator=' should check for assignment to self">
  </error>

  <error id="initializerList" severity="style" msg="Member variable 'class::variable' is in the wrong order in the initializer list." verbose="Members are initialized in the order they are declared, not the order they are in the initializer list.  Keeping the initializer list in the same order that the members were declared prevents order dependent initialization errors.">
  </error>
  <error id="exceptThrowInDestructor" severity="error" msg="Throwing exception in destructor" verbose="Throwing exception in destructor">
  </error>
  <error id="exceptDeallocThrow" severity="warning" msg="Throwing exception in invalid state, p points at deallocated memory" verbose="Throwing exception in invalid state, p points at deallocated memory">
  </error>
  <error id="exceptRethrowCopy" severity="style" msg="Throwing a copy of the caught exception instead of rethrowing the original exception" verbose="Rethrowing an exception with 'throw varname;' makes an unnecessary copy of 'varname'.&#xa;To rethrow the caught exception without unnecessary copying or slicing, use a bare 'throw;'.">
  </error>
  <error id="catchExceptionByValue" severity="style" msg="Exception should be caught by reference." verbose="The exception is caught as a value. It could be caught as a (const) reference which is usually recommended in C++.">
  </error>
  <error id="assignIfError" severity="style" msg="Mismatching assignment and comparison, comparison is always false" verbose="Mismatching assignment and comparison, comparison is always false">
  </error>
  <error id="comparisonError" severity="style" msg="Expression '(X &amp; 0x6) == 0x1' is always false" verbose="The expression '(X &amp; 0x6) == 0x1' is always false. Check carefully constants and operators used, these errors might be hard to spot sometimes. In case of complex expression it might help to split it to separate expressions.">
  </error>
  <error id="multiCondition" severity="style" msg="'else if' condition matches previous condition at line 1" verbose="'else if' condition matches previous condition at line 1">
  </error>
  <error id="memleak" severity="error" msg="Memory leak: varname" verbose="Memory leak: varname">
  </error>
  <error id="resourceLeak" severity="error" msg="Resource leak: varname" verbose="Resource leak: varname">
  </error>
  <error id="deallocDealloc" severity="error" msg="Deallocating a deallocated pointer: varname" verbose="Deallocating a deallocated pointer: varname">
  </error>
  <error id="deallocuse" severity="error" msg="Dereferencing 'varname' after it is deallocated / released" verbose="Dereferencing 'varname' after it is deallocated / released">
  </error>
  <error id="mismatchSize" severity="error" msg="The given size sz is mismatching" verbose="The given size sz is mismatching">
  </error>
  <error id="mismatchAllocDealloc" severity="error" msg="Mismatching allocation and deallocation: varname" verbose="Mismatching allocation and deallocation: varname">
  </error>
  <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: 'varname' nulled but not freed upon failure" verbose="Common realloc mistake: 'varname' nulled but not freed upon failure">
  </error>
  <error id="nonreentrantFunctionscrypt" severity="portability" msg="Found non reentrant function 'crypt'. For threadsafe applications it is recommended to use the reentrant replacement function 'crypt_r'" verbose="Found non reentrant function 'crypt'. For threadsafe applications it is recommended to use the reentrant replacement function 'crypt_r'">
  </error>
  <error id="nonreentrantFunctionsctermid" severity="portability" msg="Found non reentrant function 'ctermid'. For threadsafe applications it is recommended to use the reentrant replacement function 'ctermid_r'" verbose="Found non reentrant function 'ctermid'. For threadsafe applications it is recommended to use the reentrant replacement function 'ctermid_r'">
  </error>
  <error id="nonreentrantFunctionsecvt" severity="portability" msg="Found non reentrant function 'ecvt'. For threadsafe applications it is recommended to use the reentrant replacement function 'ecvt_r'" verbose="Found non reentrant function 'ecvt'. For threadsafe applications it is recommended to use the reentrant replacement function 'ecvt_r'">
  </error>
  <error id="nonreentrantFunctionsfcvt" severity="portability" msg="Found non reentrant function 'fcvt'. For threadsafe applications it is recommended to use the reentrant replacement function 'fcvt_r'" verbose="Found non reentrant function 'fcvt'. For threadsafe applications it is recommended to use the reentrant replacement function 'fcvt_r'">
  </error>
  <error id="nonreentrantFunctionsfgetgrent" severity="portability" msg="Found non reentrant function 'fgetgrent'. For threadsafe applications it is recommended to use the reentrant replacement function 'fgetgrent_r'" verbose="Found non reentrant function 'fgetgrent'. For threadsafe applications it is recommended to use the reentrant replacement function 'fgetgrent_r'">
  </error>
  <error id="nonreentrantFunctionsfgetpwent" severity="portability" msg="Found non reentrant function 'fgetpwent'. For threadsafe applications it is recommended to use the reentrant replacement function 'fgetpwent_r'" verbose="Found non reentrant function 'fgetpwent'. For threadsafe applications it is recommended to use the reentrant replacement function 'fgetpwent_r'">
  </error>
  <error id="nonreentrantFunctionsfgetspent" severity="portability" msg="Found non reentrant function 'fgetspent'. For threadsafe applications it is recommended to use the reentrant replacement function 'fgetspent_r'" verbose="Found non reentrant function 'fgetspent'. For threadsafe applications it is recommended to use the reentrant replacement function 'fgetspent_r'">
  </error>
  <error id="nonreentrantFunctionsgcvt" severity="portability" msg="Found non reentrant function 'gcvt'. For threadsafe applications it is recommended to use the reentrant replacement function 'gcvt_r'" verbose="Found non reentrant function 'gcvt'. For threadsafe applications it is recommended to use the reentrant replacement function 'gcvt_r'">
  </error>
  <error id="nonreentrantFunctionsgetgrent" severity="portability" msg="Found non reentrant function 'getgrent'. For threadsafe applications it is recommended to use the reentrant replacement function 'getgrent_r'" verbose="Found non reentrant function 'getgrent'. For threadsafe applications it is recommended to use the reentrant replacement function 'getgrent_r'">
  </error>
  <error id="nonreentrantFunctionsgetgrgid" severity="portability" msg="Found non reentrant function 'getgrgid'. For threadsafe applications it is recommended to use the reentrant replacement function 'getgrgid_r'" verbose="Found non reentrant function 'getgrgid'. For threadsafe applications it is recommended to use the reentrant replacement function 'getgrgid_r'">
  </error>
  <error id="nonreentrantFunctionsgetgrnam" severity="portability" msg="Found non reentrant function 'getgrnam'. For threadsafe applications it is recommended to use the reentrant replacement function 'getgrnam_r'" verbose="Found non reentrant function 'getgrnam'. For threadsafe applications it is recommended to use the reentrant replacement function 'getgrnam_r'">
  </error>
  <error id="nonreentrantFunctionsgethostbyaddr" severity="portability" msg="Found non reentrant function 'gethostbyaddr'. For threadsafe applications it is recommended to use the reentrant replacement function 'gethostbyaddr_r'" verbose="Found non reentrant function 'gethostbyaddr'. For threadsafe applications it is recommended to use the reentrant replacement function 'gethostbyaddr_r'">
  </error>
  <error id="nonreentrantFunctionsgethostbyname" severity="portability" msg="Found non reentrant function 'gethostbyname'. For threadsafe applications it is recommended to use the reentrant replacement function 'gethostbyname_r'" verbose="Found non reentrant function 'gethostbyname'. For threadsafe applications it is recommended to use the reentrant replacement function 'gethostbyname_r'">
  </error>
  <error id="nonreentrantFunctionsgethostbyname2" severity="portability" msg="Found non reentrant function 'gethostbyname2'. For threadsafe applications it is recommended to use the reentrant replacement function 'gethostbyname2_r'" verbose="Found non reentrant function 'gethostbyname2'. For threadsafe applications it is recommended to use the reentrant replacement function 'gethostbyname2_r'">
  </error>
  <error id="nonreentrantFunctionsgethostent" severity="portability" msg="Found non reentrant function 'gethostent'. For threadsafe applications it is recommended to use the reentrant replacement function 'gethostent_r'" verbose="Found non reentrant function 'gethostent'. For threadsafe applications it is recommended to use the reentrant replacement function 'gethostent_r'">
  </error>
  <error id="nonreentrantFunctionsgetlogin" severity="portability" msg="Found non reentrant function 'getlogin'. For threadsafe applications it is recommended to use the reentrant replacement function 'getlogin_r'" verbose="Found non reentrant function 'getlogin'. For threadsafe applications it is recommended to use the reentrant replacement function 'getlogin_r'">
  </error>
  <error id="nonreentrantFunctionsgetnetbyaddr" severity="portability" msg="Found non reentrant function 'getnetbyaddr'. For threadsafe applications it is recommended to use the reentrant replacement function 'getnetbyaddr_r'" verbose="Found non reentrant function 'getnetbyaddr'. For threadsafe applications it is recommended to use the reentrant replacement function 'getnetbyaddr_r'">
  </error>
  <error id="nonreentrantFunctionsgetnetbyname" severity="portability" msg="Found non reentrant function 'getnetbyname'. For threadsafe applications it is recommended to use the reentrant replacement function 'getnetbyname_r'" verbose="Found non reentrant function 'getnetbyname'. For threadsafe applications it is recommended to use the reentrant replacement function 'getnetbyname_r'">
  </error>
  <error id="nonreentrantFunctionsgetnetgrent" severity="portability" msg="Found non reentrant function 'getnetgrent'. For threadsafe applications it is recommended to use the reentrant replacement function 'getnetgrent_r'" verbose="Found non reentrant function 'getnetgrent'. For threadsafe applications it is recommended to use the reentrant replacement function 'getnetgrent_r'">
  </error>
  <error id="nonreentrantFunctionsgetprotobyname" severity="portability" msg="Found non reentrant function 'getprotobyname'. For threadsafe applications it is recommended to use the reentrant replacement function 'getprotobyname_r'" verbose="Found non reentrant function 'getprotobyname'. For threadsafe applications it is recommended to use the reentrant replacement function 'getprotobyname_r'">
  </error>
  <error id="nonreentrantFunctionsgetpwent" severity="portability" msg="Found non reentrant function 'getpwent'. For threadsafe applications it is recommended to use the reentrant replacement function 'getpwent_r'" verbose="Found non reentrant function 'getpwent'. For threadsafe applications it is recommended to use the reentrant replacement function 'getpwent_r'">
  </error>
  <error id="nonreentrantFunctionsgetpwnam" severity="portability" msg="Found non reentrant function 'getpwnam'. For threadsafe applications it is recommended to use the reentrant replacement function 'getpwnam_r'" verbose="Found non reentrant function 'getpwnam'. For threadsafe applications it is recommended to use the reentrant replacement function 'getpwnam_r'">
  </error>
  <error id="nonreentrantFunctionsgetpwuid" severity="portability" msg="Found non reentrant function 'getpwuid'. For threadsafe applications it is recommended to use the reentrant replacement function 'getpwuid_r'" verbose="Found non reentrant function 'getpwuid'. For threadsafe applications it is recommended to use the reentrant replacement function 'getpwuid_r'">
  </error>
  <error id="nonreentrantFunctionsgetrpcbyname" severity="portability" msg="Found non reentrant function 'getrpcbyname'. For threadsafe applications it is recommended to use the reentrant replacement function 'getrpcbyname_r'" verbose="Found non reentrant function 'getrpcbyname'. For threadsafe applications it is recommended to use the reentrant replacement function 'getrpcbyname_r'">
  </error>
  <error id="nonreentrantFunctionsgetrpcbynumber" severity="portability" msg="Found non reentrant function 'getrpcbynumber'. For threadsafe applications it is recommended to use the reentrant replacement function 'getrpcbynumber_r'" verbose="Found non reentrant function 'getrpcbynumber'. For threadsafe applications it is recommended to use the reentrant replacement function 'getrpcbynumber_r'">
  </error>
  <error id="nonreentrantFunctionsgetrpcent" severity="portability" msg="Found non reentrant function 'getrpcent'. For threadsafe applications it is recommended to use the reentrant replacement function 'getrpcent_r'" verbose="Found non reentrant function 'getrpcent'. For threadsafe applications it is recommended to use the reentrant replacement function 'getrpcent_r'">
  </error>
  <error id="nonreentrantFunctionsgetservbyname" severity="portability" msg="Found non reentrant function 'getservbyname'. For threadsafe applications it is recommended to use the reentrant replacement function 'getservbyname_r'" verbose="Found non reentrant function 'getservbyname'. For threadsafe applications it is recommended to use the reentrant replacement function 'getservbyname_r'">
  </error>
  <error id="nonreentrantFunctionsgetservbyport" severity="portability" msg="Found non reentrant function 'getservbyport'. For threadsafe applications it is recommended to use the reentrant replacement function 'getservbyport_r'" verbose="Found non reentrant function 'getservbyport'. For threadsafe applications it is recommended to use the reentrant replacement function 'getservbyport_r'">
  </error>
  <error id="nonreentrantFunctionsgetservent" severity="portability" msg="Found non reentrant function 'getservent'. For threadsafe applications it is recommended to use the reentrant replacement function 'getservent_r'" verbose="Found non reentrant function 'getservent'. For threadsafe applications it is recommended to use the reentrant replacement function 'getservent_r'">
  </error>
  <error id="nonreentrantFunctionsgetspent" severity="portability" msg="Found non reentrant function 'getspent'. For threadsafe applications it is recommended to use the reentrant replacement function 'getspent_r'" verbose="Found non reentrant function 'getspent'. For threadsafe applications it is recommended to use the reentrant replacement function 'getspent_r'">
  </error>
  <error id="nonreentrantFunctionsgetspnam" severity="portability" msg="Found non reentrant function 'getspnam'. For threadsafe applications it is recommended to use the reentrant replacement function 'getspnam_r'" verbose="Found non reentrant function 'getspnam'. For threadsafe applications it is recommended to use the reentrant replacement function 'getspnam_r'">
  </error>
  <error id="nonreentrantFunctionsgmtime" severity="portability" msg="Found non reentrant function 'gmtime'. For threadsafe applications it is recommended to use the reentrant replacement function 'gmtime_r'" verbose="Found non reentrant function 'gmtime'. For threadsafe applications it is recommended to use the reentrant replacement function 'gmtime_r'">
  </error>
  <error id="nonreentrantFunctionslocaltime" severity="portability" msg="Found non reentrant function 'localtime'. For threadsafe applications it is recommended to use the reentrant replacement function 'localtime_r'" verbose="Found non reentrant function 'localtime'. For threadsafe applications it is recommended to use the reentrant replacement function 'localtime_r'">
  </error>
  <error id="nonreentrantFunctionsreaddir" severity="portability" msg="Found non reentrant function 'readdir'. For threadsafe applications it is recommended to use the reentrant replacement function 'readdir_r'" verbose="Found non reentrant function 'readdir'. For threadsafe applications it is recommended to use the reentrant replacement function 'readdir_r'">
  </error>
  <error id="nonreentrantFunctionsstrtok" severity="portability" msg="Found non reentrant function 'strtok'. For threadsafe applications it is recommended to use the reentrant replacement function 'strtok_r'" verbose="Found non reentrant function 'strtok'. For threadsafe applications it is recommended to use the reentrant replacement function 'strtok_r'">
  </error>
  <error id="nonreentrantFunctionstempnam" severity="portability" msg="Found non reentrant function 'tempnam'. For threadsafe applications it is recommended to use the reentrant replacement function 'tempnam_r'" verbose="Found non reentrant function 'tempnam'. For threadsafe applications it is recommended to use the reentrant replacement function 'tempnam_r'">
  </error>
  <error id="nonreentrantFunctionsttyname" severity="portability" msg="Found non reentrant function 'ttyname'. For threadsafe applications it is recommended to use the reentrant replacement function 'ttyname_r'" verbose="Found non reentrant function 'ttyname'. For threadsafe applications it is recommended to use the reentrant replacement function 'ttyname_r'">
  </error>
  <error id="nullPointer" severity="error" msg="Possible null pointer dereference: pointer" verbose="Possible null pointer dereference: pointer">
  </error>
  <error id="obsoleteFunctionsasctime" severity="style" msg="Found obsolete function 'asctime'. It is recommended to use the function 'strftime' instead" verbose="Found obsolete function 'asctime'. It is recommended to use the function 'strftime' instead">
  </error>
  <error id="obsoleteFunctionsasctime_r" severity="style" msg="Found obsolete function 'asctime_r'. It is recommended to use the function 'strftime' instead" verbose="Found obsolete function 'asctime_r'. It is recommended to use the function 'strftime' instead">
  </error>
  <error id="obsoleteFunctionsbcmp" severity="style" msg="Found obsolete function 'bcmp'. It is recommended that new applications use the 'memcmp' function" verbose="Found obsolete function 'bcmp'. It is recommended that new applications use the 'memcmp' function">
  </error>
  <error id="obsoleteFunctionsbcopy" severity="style" msg="Found obsolete function 'bcopy'. It is recommended that new applications use the 'memmove' or 'memcpy' functions" verbose="Found obsolete function 'bcopy'. It is recommended that new applications use the 'memmove' or 'memcpy' functions">
  </error>
  <error id="obsoleteFunctionsbsd_signal" severity="style" msg="Found obsolete function 'bsd_signal'. It is recommended that new applications use the 'sigaction' function" verbose="Found obsolete function 'bsd_signal'. It is recommended that new applications use the 'sigaction' function">
  </error>
  <error id="obsoleteFunctionsbzero" severity="style" msg="Found obsolete function 'bzero'. It is recommended that new applications use the 'memset' function" verbose="Found obsolete function 'bzero'. It is recommended that new applications use the 'memset' function">
  </error>
  <error id="obsoleteFunctionsctime" severity="style" msg="Found obsolete function 'ctime'. It is recommended to use the function 'strftime' instead" verbose="Found obsolete function 'ctime'. It is recommended to use the function 'strftime' instead">
  </error>
  <error id="obsoleteFunctionsecvt" severity="style" msg="Found obsolete function 'ecvt'. It is recommended that new applications use the 'sprintf' function" verbose="Found obsolete function 'ecvt'. It is recommended that new applications use the 'sprintf' function">
  </error>
  <error id="obsoleteFunctionsfcvt" severity="style" msg="Found obsolete function 'fcvt'. It is recommended that new applications use the 'sprintf' function" verbose="Found obsolete function 'fcvt'. It is recommended that new applications use the 'sprintf' function">
  </error>
  <error id="obsoleteFunctionsftime" severity="style" msg="Found obsolete function 'ftime'." verbose="It is recommended that new applications use time(), gettimeofday(), or clock_gettime() instead. For high-resolution timing on Windows, QueryPerformanceCounter() and QueryPerformanceFrequency may be used.">
  </error>
  <error id="obsoleteFunctionsgcvt" severity="style" msg="Found obsolete function 'gcvt'. It is recommended that new applications use the 'sprintf' function" verbose="Found obsolete function 'gcvt'. It is recommended that new applications use the 'sprintf' function">
  </error>
  <error id="obsoleteFunctionsgetcontext" severity="style" msg="Found obsolete function 'getcontext'. Due to portability issues with this function, applications are recommended to be rewritten to use POSIX threads" verbose="Found obsolete function 'getcontext'. Due to portability issues with this function, applications are recommended to be rewritten to use POSIX threads">
  </error>
  <error id="obsoleteFunctionsgethostbyaddr" severity="style" msg="Found obsolete function 'gethostbyaddr'. It is recommended that new applications use the 'getnameinfo' function" verbose="Found obsolete function 'gethostbyaddr'. It is recommended that new applications use the 'getnameinfo' function">
  </error>
  <error id="obsoleteFunctionsgethostbyname" severity="style" msg="Found obsolete function 'gethostbyname'. It is recommended that new applications use the 'getaddrinfo' function" verbose="Found obsolete function 'gethostbyname'. It is recommended that new applications use the 'getaddrinfo' function">
  </error>
  <error id="obsoleteFunctionsgetwd" severity="style" msg="Found obsolete function 'getwd'. It is recommended that new applications use the 'getcwd' function" verbose="Found obsolete function 'getwd'. It is recommended that new applications use the 'getcwd' function">
  </error>
  <error id="obsoleteFunctionsindex" severity="style" msg="Found obsolete function 'index'. It is recommended to use the function 'strchr' instead" verbose="Found obsolete function 'index'. It is recommended to use the function 'strchr' instead">
  </error>
  <error id="obsoleteFunctionsmakecontext" severity="style" msg="Found obsolete function 'makecontext'. Due to portability issues with this function, applications are recommended to be rewritten to use POSIX threads" verbose="Found obsolete function 'makecontext'. Due to portability issues with this function, applications are recommended to be rewritten to use POSIX threads">
  </error>
  <error id="obsoleteFunctionspthread_attr_getstackaddr" severity="style" msg="Found obsolete function 'pthread_attr_getstackaddr'. It is recommended that new applications use the 'pthread_attr_getstack' function" verbose="Found obsolete function 'pthread_attr_getstackaddr'. It is recommended that new applications use the 'pthread_attr_getstack' function">
  </error>
  <error id="obsoleteFunctionspthread_attr_setstackaddr" severity="style" msg="Found obsolete function 'pthread_attr_setstackaddr'. It is recommended that new applications use the 'pthread_attr_setstack' function" verbose="Found obsolete function 'pthread_attr_setstackaddr'. It is recommended that new applications use the 'pthread_attr_setstack' function">
  </error>
  <error id="obsoleteFunctionsrand_r" severity="style" msg="Found obsolete function 'rand_r'. It is recommended to use the function 'rand' instead" verbose="Found obsolete function 'rand_r'. It is recommended to use the function 'rand' instead">
  </error>
  <error id="obsoleteFunctionsrindex" severity="style" msg="Found obsolete function 'rindex'. It is recommended to use the function 'strrchr' instead" verbose="Found obsolete function 'rindex'. It is recommended to use the function 'strrchr' instead">
  </error>
  <error id="obsoleteFunctionsscalbln" severity="style" msg="Found obsolete function 'scalb'. It is recommended to use either 'scalbln', 'scalblnf' or 'scalblnl' instead of this function" verbose="Found obsolete function 'scalb'. It is recommended to use either 'scalbln', 'scalblnf' or 'scalblnl' instead of this function">
  </error>
  <error id="obsoleteFunctionsswapcontext" severity="style" msg="Found obsolete function 'swapcontext'. Due to portability issues with this function, applications are recommended to be rewritten to use POSIX threads" verbose="Found obsolete function 'swapcontext'. Due to portability issues with this function, applications are recommended to be rewritten to use POSIX threads">
  </error>
  <error id="obsoleteFunctionstmpnam" severity="style" msg="Found obsolete function 'tmpnam'. It is recommended to use either 'tmpfile', 'mkstemp', or 'mkdtemp' instead for this function" verbose="Found obsolete function 'tmpnam'. It is recommended to use either 'tmpfile', 'mkstemp', or 'mkdtemp' instead for this function">
  </error>
  <error id="obsoleteFunctionstmpnam_r" severity="style" msg="Found obsolete function 'tmpnam_r'. It is recommended to use either 'tmpfile', 'mkstemp', or 'mkdtemp' instead for this function" verbose="Found obsolete function 'tmpnam_r'. It is recommended to use either 'tmpfile', 'mkstemp', or 'mkdtemp' instead for this function">
  </error>
  <error id="obsoleteFunctionsualarm" severity="style" msg="Found obsolete function 'ualarm'. It is recommended to use either 'timer_create', 'timer_delete', 'timer_getoverrun', 'timer_gettime', or 'timer_settime' instead of this function" verbose="Found obsolete function 'ualarm'. It is recommended to use either 'timer_create', 'timer_delete', 'timer_getoverrun', 'timer_gettime', or 'timer_settime' instead of this function">
  </error>
  <error id="obsoleteFunctionsusleep" severity="style" msg="Found obsolete function 'usleep'. It is recommended that new applications use the 'nanosleep' or 'setitimer' function" verbose="Found obsolete function 'usleep'. POSIX.1-2001 declares usleep() function obsolete and POSIX.1-2008 removes it. It is recommended that new applications use the 'nanosleep' or 'setitimer' function.">
  </error>
  <error id="obsoleteFunctionsutime" severity="style" msg="Found obsolete function 'utime'. It is recommended to use the function 'utimensat' instead" verbose="Found obsolete function 'utime'. It is recommended to use the function 'utimensat' instead">
  </error>
  <error id="obsoleteFunctionsvfork" severity="style" msg="Found obsolete function 'vfork'. It is recommended to use the function 'fork' instead" verbose="Found obsolete function 'vfork'. It is recommended to use the function 'fork' instead">
  </error>
  <error id="obsoleteFunctionswcswcs" severity="style" msg="Found obsolete function 'wcswcs'. It is recommended to use the function 'wcsstr' instead" verbose="Found obsolete function 'wcswcs'. It is recommended to use the function 'wcsstr' instead">
  </error>
  <error id="assignBoolToPointer" severity="error" msg="Assigning bool value to pointer (converting bool value to address)" verbose="Assigning bool value to pointer (converting bool value to address)">
  </error>
  <error id="sprintfOverlappingData" severity="error" msg="Undefined behavior: variable is used as parameter and destination in s[n]printf()." verbose="The variable 'varname' is used both as a parameter and as a destination in s[n]printf(). The origin and destination buffers overlap. Quote from glibc (C-library) documentation (http://www.gnu.org/software/libc/manual/html_mono/libc.html#Formatted-Output-Functions): 'If copying takes place between objects that overlap as a result of a call to sprintf() or snprintf(), the results are undefined.'">
  </error>
  <error id="udivError" severity="error" msg="Unsigned division. The result will be wrong." verbose="Unsigned division. The result will be wrong.">
  </error>
  <error id="zerodiv" severity="error" msg="Division by zero" verbose="Division by zero">
  </error>
  <error id="wrongmathcall" severity="error" msg="Passing value  to () leads to undefined result" verbose="Passing value  to () leads to undefined result">
  </error>
  <error id="fflushOnInputStream" severity="error" msg="fflush() called on input stream &quot;stdin&quot; may result in undefined behaviour" verbose="fflush() called on input stream &quot;stdin&quot; may result in undefined behaviour">
  </error>
  <error id="unusedScopedObject" severity="error" msg="instance of &quot;varname&quot; object destroyed immediately" verbose="instance of &quot;varname&quot; object destroyed immediately">
  </error>
  <error id="sizeofwithsilentarraypointer" severity="error" msg="Using sizeof for array given as function argument returns the size of pointer." verbose="Giving array as function parameter and then using sizeof-operator for the array argument. In this case the sizeof-operator returns the size of pointer (in the system). It does not return the size of the whole array in bytes as might be expected. For example, this code:&#xa;     int f(char a[100]) {&#xa;         return sizeof(a);&#xa;     }&#xa; returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 100 (the size of the array in bytes).">
  </error>

  <error id="sizeofwithnumericparameter" severity="warning" msg="Using sizeof with a numeric constant as function argument might not be what you intended." verbose="It is unusual to use constant value with sizeof. For example, sizeof(10) returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 10. sizeof('A') and sizeof(char) can return different results.">
  </error>
  <error id="coutCerrMisusage" severity="error" msg="Invalid usage of output stream: '&lt;&lt; std::cout'." verbose="Invalid usage of output stream: '&lt;&lt; std::cout'.">
  </error>
  <error id="doubleFree" severity="error" msg="Memory pointed to by 'varname' is freed twice." verbose="Memory pointed to by 'varname' is freed twice.">
  </error>
  <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting">
  </error>
  <error id="dangerousUsageStrtol" severity="error" msg="Invalid radix in call to strtol or strtoul. Must be 0 or 2-36" verbose="Invalid radix in call to strtol or strtoul. Must be 0 or 2-36">
  </error>
  <error id="passedByValue" severity="performance" msg="Function parameter 'parametername' should be passed by reference." verbose="Parameter 'parametername' is passed as a value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
  </error>
  <error id="constStatement" severity="warning" msg="Redundant code: Found a statement that begins with type constant" verbose="Redundant code: Found a statement that begins with type constant">
  </error>
  <error id="charArrayIndex" severity="warning" msg="Using char type as array index" verbose="Using signed char type as array index. If the value can be greater than 127 there will be a buffer overflow (because of sign extension).">
  </error>
  <error id="charBitOp" severity="warning" msg="When using char variables in bit operations, sign extension can generate unexpected results." verbose="When using char variables in bit operations, sign extension can generate unexpected results. For example:&#xa;    char c = 0x80;&#xa;    int i = 0 | c;&#xa;    if (i &amp; 0x8000)&#xa;        printf(&quot;not expected&quot;);&#xa;The 'not expected' will be printed on the screen.">
  </error>
  <error id="variableScope" severity="style" msg="The scope of the variable 'varname' can be reduced" verbose="The scope of the variable 'varname' can be reduced. Warning: It can be unsafe to fix this message. Be careful. Especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:&#xa;void f(int x)&#xa;{&#xa;    int i = 0;&#xa;    if (x) {&#xa;        // it's safe to move 'int i = 0' here&#xa;        for (int n = 0; n &lt; 10; ++n) {&#xa;            // it is possible but not safe to move 'int i = 0' here&#xa;            do_something(&amp;i);&#xa;        }&#xa;    }&#xa;}&#xa;When you see this message it is always safe to reduce the variable scope 1 level.">
  </error>
  <error id="strPlusChar" severity="error" msg="Unusual pointer arithmetic" verbose="Unusual pointer arithmetic">
  </error>
  <error id="sizeofsizeof" severity="warning" msg="Calling sizeof for 'sizeof'." verbose="Calling sizeof for 'sizeof looks like a suspicious code and most likely there should be just one 'sizeof'. The current code is equivalent to 'sizeof(size_t)'">
  </error>
  <error id="sizeofCalculation" severity="warning" msg="Found calculation inside sizeof()" verbose="Found calculation inside sizeof()">
  </error>
  <error id="redundantAssignInSwitch" severity="warning" msg="Redundant assignment of &quot;varname&quot; in switch" verbose="Redundant assignment of &quot;varname&quot; in switch">
  </error>
  <error id="switchCaseFallThrough" severity="style" msg="Switch falls through case without comment" verbose="Switch falls through case without comment">
  </error>
  <error id="selfAssignment" severity="warning" msg="Redundant assignment of &quot;varname&quot; to itself" verbose="Redundant assignment of &quot;varname&quot; to itself">
  </error>
  <error id="assignmentInAssert" severity="warning" msg="Assert statement modifies 'varname'." verbose="Variable 'varname' is modified insert assert statement. Assert statements are removed from release builds so the code inside assert statement is not run. If the code is needed also in release builds this is a bug.">
  </error>
  <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data" verbose="scanf without field width limits can crash with huge input data. To fix this error message add a field width specifier:&#xa;    %s =&gt; %20s&#xa;    %i =&gt; %3i&#xa;&#xa;Sample program that can crash:&#xa;&#xa;#include &lt;stdio.h&gt;&#xa;int main()&#xa;{&#xa;    int a;&#xa;    scanf(&quot;%i&quot;, &amp;a);&#xa;    return 0;&#xa;}&#xa;&#xa;To make it crash:&#xa;perl -e 'print &quot;5&quot;x2100000' | ./a.out">
  </error>
  <error id="incorrectLogicOperator" severity="warning" msg="Mutual exclusion over || always evaluates to true. Did you intend to use &amp;&amp; instead?" verbose="Mutual exclusion over || always evaluates to true. Did you intend to use &amp;&amp; instead?">
  </error>
  <error id="secondAlwaysTrueFalseWhenFirstTrue" severity="style" msg="when first comparison is true, the 2nd comparison is always true" verbose="when first comparison is true, the 2nd comparison is always true">
  </error>
  <error id="memsetZeroBytes" severity="warning" msg="memset() called to fill 0 bytes of 'varname'" verbose="memset() called to fill 0 bytes of 'varname'. Second and third arguments might be inverted.">
  </error>
  <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for + and ?" verbose="Suspicious calculation. Please use parentheses to clarify the code. The code 'a+b?c:d' should be written as either '(a+b)?c:d' or 'a+(b?c:d)'.">
  </error>
  <error id="clarifyCondition" severity="style" msg="Suspicious condition (assignment+comparison), it can be clarified with parentheses" verbose="Suspicious condition (assignment+comparison), it can be clarified with parentheses">
  </error>
  <error id="incorrectStringCompare" severity="warning" msg="String literal &quot;Hello World&quot; doesn't match length argument for substr(12)." verbose="String literal &quot;Hello World&quot; doesn't match length argument for substr(12).">
  </error>
  <error id="incorrectStringBooleanError" severity="warning" msg="A boolean comparison with the string literal &quot;Hello World&quot; is always true." verbose="A boolean comparison with the string literal &quot;Hello World&quot; is always true.">
  </error>
  <error id="incrementboolean" severity="style" msg="The use of a variable of type bool with the ++ postfix operator is always true and deprecated by the C++ Standard." verbose="The operand of a postfix increment operator may be of type bool but it is deprecated by C++ Standard (Annex D-1) and the operand is always set to true.">
  </error>
  <error id="comparisonOfBoolWithInt" severity="warning" msg="Comparison of a boolean with integer that is neither 1 nor 0" verbose="The expression &quot;varname&quot; is of type 'bool' and it is compared against a integer value that is neither 1 nor 0.">
  </error>
  <error id="duplicateIf" severity="style" msg="Found duplicate if expressions." verbose="Finding the same expression more than once is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
  </error>
  <error id="duplicateBranch" severity="style" msg="Found duplicate branches for if and else." verbose="Finding the same code for an if branch and an else branch is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
  </error>
  <error id="duplicateExpression" severity="style" msg="Same expression on both sides of '&amp;&amp;'." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
  </error>
  <error id="stringCompare" severity="warning" msg="Comparison of identical string variables." verbose="The compared strings, 'varname1' and 'varname2', are identical. This could be a logic bug.">
  </error>
  <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="The second of the two statements can never be executed, and so should be removed.">
  </error>
  <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed.">
  </error>
  <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable 'varname' is less than zero." verbose="An unsigned variable will never be negative so it is either pointless or an error to check if it is.">
  </error>
  <error id="unsignedPositive" severity="style" msg="An unsigned variable 'varname' can't be negative so it is unnecessary to test it." verbose="An unsigned variable 'varname' can't be negative so it is unnecessary to test it.">
  </error>

  <error id="compareBoolExpressionWithInt" severity="warning" msg="Comparison of a boolean expression with an integer other than 0 or 1." verbose="Comparison of a boolean expression with an integer other than 0 or 1.">
  </error>

  <error id="wrongPrintfScanfArgNum" severity="error" msg="printf format string has 3 parameters but only 2 are given" verbose="printf format string has 3 parameters but only 2 are given">
  </error>
  <error id="invalidScanfArgType" severity="warning" msg="scanf argument no. 1: requires non-const pointers or arrays as arguments" verbose="scanf argument no. 1: requires non-const pointers or arrays as arguments">
  </error>
  <error id="invalidPrintfArgType_s" severity="warning" msg="%s in format string (no. 1) requires a char* given in the argument list" verbose="%s in format string (no. 1) requires a char* given in the argument list">
  </error>
  <error id="invalidPrintfArgType_n" severity="warning" msg="%n in format string (no. 1) requires a pointer to an non-const integer given in the argument list" verbose="%n in format string (no. 1) requires a pointer to an non-const integer given in the argument list">
  </error>
  <error id="invalidPrintfArgType_p" severity="warning" msg="%p in format string (no. 1) requires an integer or pointer given in the argument list" verbose="%p in format string (no. 1) requires an integer or pointer given in the argument list">
  </error>
  <error id="invalidPrintfArgType_int" severity="warning" msg="%u in format string (no. 1) requires an integer given in the argument list" verbose="%u in format string (no. 1) requires an integer given in the argument list">
  </error>
  <error id="invalidPrintfArgType_float" severity="warning" msg="%f in format string (no. 1) requires a floating point number given in the argument list" verbose="%f in format string (no. 1) requires a floating point number given in the argument list">
  </error>
  <error id="wrongcctypecall" severity="error" msg="Passing value value to funname() cause undefined behavior, which may lead to a crash" verbose="Passing value value to funname() cause undefined behavior, which may lead to a crash">
  </error>
  <error id="invalidIterator1" severity="error" msg="Invalid iterator: iterator" verbose="Invalid iterator: iterator">
  </error>
  <error id="iterators" severity="error" msg="Same iterator is used with both container1 and container2" verbose="Same iterator is used with both container1 and container2">
  </error>
  <error id="mismatchingContainers" severity="error" msg="mismatching containers" verbose="mismatching containers">
  </error>
  <error id="eraseDereference" severity="error" msg="Dereferenced iterator 'iter' has been erased" verbose="Dereferenced iterator 'iter' has been erased">
  </error>
  <error id="stlOutOfBounds" severity="error" msg="When i==foo.size(), foo[i] is out of bounds" verbose="When i==foo.size(), foo[i] is out of bounds">
  </error>
  <error id="erase" severity="error" msg="Dangerous iterator usage after erase()-method." verbose="The iterator is invalid after it has been used in erase() function. Dereferencing or comparing it with another iterator is invalid operation.">
  </error>
  <error id="invalidIterator2" severity="error" msg="After push_back|push_front|insert, the iterator 'iterator' may be invalid" verbose="After push_back|push_front|insert, the iterator 'iterator' may be invalid">
  </error>
  <error id="invalidPointer" severity="error" msg="Invalid pointer 'pointer' after push_back / push_front" verbose="Invalid pointer 'pointer' after push_back / push_front">
  </error>
  <error id="stlBoundries" severity="error" msg="Dangerous container iterator compare using &lt; operator for container" verbose="Container 'container' iterator compared with &lt; operator. Using &lt; operator with container type iterators is dangerous since the order of the items is not guaranteed. One should use != operator instead when comparing iterators in the container.">
  </error>
  <error id="stlIfFind" severity="warning" msg="Suspicious condition. The result of find is an iterator, but it is not properly checked." verbose="Suspicious condition. The result of find is an iterator, but it is not properly checked.">
  </error>
  <error id="stlIfStrFind" severity="warning" msg="Suspicious checking of string::find() return value." verbose="Checking of string::find() return value looks Suspicious. string::find will return 0 if the string is found at position 0. If that is wanted to check then string::compare is a faster alternative because it doesn't scan through the string.">
  </error>
  <error id="stlcstr" severity="error" msg="Dangerous usage of c_str(). The returned value by c_str() is invalid after this call." verbose="Dangerous usage of c_str(). The c_str() return value is only valid until its string is deleted.">
  </error>
  <error id="stlSize" severity="performance" msg="Possible inefficient checking for 'list' emptiness." verbose="Checking for 'list' emptiness might be inefficient. Using list.empty() instead of list.size() can be faster. list.size() can take linear time but list.empty() is guaranteed to take constant time.">
  </error>
  <error id="redundantIfRemove" severity="style" msg="Redundant checking of STL container element." verbose="Redundant checking of STL container element existence before removing it. The remove method in the STL will not do anything if element doesn't exist">
  </error>
  <error id="useAutoPointerCopy" severity="style" msg="Copy 'auto_ptr' pointer to another do not create two equal objects since one has lost its ownership of the pointer." verbose="The auto_ptr has semantics of strict ownership, meaning that the auto_ptr instance is the sole entity responsible for the object's lifetime. If an auto_ptr is copied, the source loses the reference.">
  </error>
  <error id="useAutoPointerContainer" severity="error" msg="You can randomly lose access to pointers if you store 'auto_ptr' pointers in a container because the copy-semantics of 'auto_ptr' are not compatible with containers." verbose="An element of container must be able to be copied but 'auto_ptr' does not fulfill this requirement. You should consider to use 'shared_ptr' or 'unique_ptr'. It is suitable for use in containers, because they no longer copy their values, they move them.">
  </error>
  <error id="useAutoPointerArray" severity="error" msg="Object pointed by an 'auto_ptr' is destroyed using operator 'delete'. You should not use 'auto_ptr' for pointers obtained with operator 'new[]'." verbose="Object pointed by an 'auto_ptr' is destroyed using operator 'delete'. This means that you should only use 'auto_ptr' for pointers obtained with operator 'new'. This excludes arrays, which are allocated by operator 'new[]' and must be deallocated by operator 'delete[]'.">
  </error>
  <error id="uselessCallsCompare" severity="warning" msg="It is inefficient to call 'str.find(str)' as it always returns 0." verbose="The 'std::string::find()' returns zero when given itself as parameter (str.find(str)). As it is currently the code is inefficient. It is also possible either the string searched ('str') or searched for ('str') is wrong/mixed in the code?">
  </error>
  <error id="uselessCallsSwap" severity="performance" msg="It is inefficient to swap a object with itself by calling 'str.swap(str)'" verbose="The 'swap()' function has no logical effect when given itself as parameter (str.swap(str)). As it is currently the code is inefficient. It is possible either the object or the parameter is wrong/mixed in the code?">
  </error>
  <error id="uselessCallsSubstr" severity="performance" msg="Function 'substr' useless call. Function create copy of the 'str' object." verbose="Function 'substr' useless call. 'substr' function create copy of the whole 'str' object which can decrease in performance. Please use '=' operator instead.">
  </error>
  <error id="uninitstring" severity="error" msg="Dangerous usage of 'varname' (strncpy doesn't always 0-terminate it)" verbose="Dangerous usage of 'varname' (strncpy doesn't always 0-terminate it)">
  </error>
  <error id="uninitdata" severity="error" msg="Data is allocated but not initialized: varname" verbose="Data is allocated but not initialized: varname">
  </error>
  <error id="uninitvar" severity="error" msg="Uninitialized variable: varname" verbose="Uninitialized variable: varname">
  </error>
  <error id="unusedFunction" severity="style" msg="The function 'funcName' is never used" verbose="The function 'funcName' is never used">
  </error>
  <error id="unusedVariable" severity="style" msg="Unused variable: varname" verbose="Unused variable: varname">
  </error>
  <error id="unusedAllocatedMemory" severity="style" msg="Variable 'varname' is allocated memory that is never used" verbose="Variable 'varname' is allocated memory that is never used">
  </error>
  <error id="unreadVariable" severity="style" msg="Variable 'varname' is assigned a value that is never used" verbose="Variable 'varname' is assigned a value that is never used">
  </error>
  <error id="unassignedVariable" severity="style" msg="Variable 'varname' is not assigned a value" verbose="Variable 'varname' is not assigned a value">
  </error>
  <error id="unusedStructMember" severity="style" msg="struct or union member 'structname::variable' is never used" verbose="struct or union member 'structname::variable' is never used">
  </error>
  <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
  </error>
  <error id="syntaxError" severity="error" msg="Invalid number of character ( ) when these macros are defined: ''." verbose="Invalid number of character ( ) when these macros are defined: ''.">
  </error>
  <error id="cppcheckError" severity="error" msg="Analysis failed. If the code is valid then please report this failure." verbose="Analysis failed. If the code is valid then please report this failure.">
  </error>

  <error id="unnecessaryForwardDeclaration" severity="style" msg="Variable 'name' forward declaration unnecessary, already declared" verbose="Variable 'name' forward declaration unnecessary, already declared">
  </error>
  <error id="variableHidingEnum" severity="style" msg="Variable 'name' hides enumerator with same name" verbose="Variable 'name' hides enumerator with same name">
  </error>
  <error id="unnecessaryQualification" severity="portability" msg="Extra qualification 'type' unnecessary and considered an error by many compilers." verbose="Extra qualification 'type' unnecessary and considered an error by many compilers.">
  </error>
  <error id="missingInclude" severity="information" msg="Include file: &quot;&quot; not found." verbose="Include file: &quot;&quot; not found.">
  </error>
  <error id="preprocessorErrorDirective" severity="error" msg="#error message" verbose="#error message">
  </error>
  </errors>
</results>
